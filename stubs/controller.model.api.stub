<?php

namespace {{ namespace }};

use {{ namespacedModel }};
use {{ rootNamespace }}Enums\{{ model }}StatusEnum;
use {{ rootNamespace }}Http\Controllers\Controller;
use {{ rootNamespace }}Http\Resources\{{ model }}Resource;
use {{ namespacedRequests }}
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Response;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Resources\Json\AnonymousResourceCollection;

class {{ class }} extends Controller
{
    public function index( Request $request ): AnonymousResourceCollection
    {
        $rowsPerPage = $request->input('rowsPerPage') ?? 7;

        ${{ modelVariable }}s = {{ model }}::filter( $request->all() )
            ->paginate( $rowsPerPage )
        ;

        return {{ model }}Resource::collection( ${{ modelVariable }}s );
    }

    // public function all( Request $request ): AnonymousResourceCollection
    // {
    //     ${{ modelVariable }}s = {{ model }}::select( 'id', 'code', 'name' )
    //         ->where( 'status', {{ model }}StatusEnum::Active )
    //         ->get()
    //     ;

    //     return {{ model }}Resource::collection( ${{ modelVariable }}s );
    // }


    public function show( {{ model }} ${{ modelVariable }} ): {{ model }}Resource
    {
        return new {{ model }}Resource( ${{ modelVariable }} );
    }


    public function store( {{ storeRequest }} $request ): {{ model }}Resource
    {
        $data = $request->validated();

        ${{ modelVariable }} = DB::transaction( fn() => {{ model }}::create( $data ) );
        return new {{ model }}Resource( ${{ modelVariable }} );
    }


    public function update( {{ updateRequest }} $request, {{ model }} ${{ modelVariable }} ): {{ model }}Resource
    {
        ${{ modelVariable }}->update( $request->all() );
        return new {{ model }}Resource( ${{ modelVariable }} );
    }


    public function destroy( {{ model }} ${{ modelVariable }} ): Response
    {
        ${{ modelVariable }}->delete();
        return response()->noContent();
    }
}
