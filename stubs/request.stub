<?php

namespace {{ namespace }};

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;
// use Illuminate\Validation\Rules\File;
// use Illuminate\Support\Str;
use App\Enums\ExampleStatusEnum;    // swap per request
// use App\Models\Account;             // ACC!
// use Illuminate\Support\Facades\Auth; // ACC!

class {{ class }} extends FormRequest
{
    // Uncomment if you prefer to stop on first failure
    // protected $stopOnFirstFailure = true;

    public function authorize(): bool
    {
        // ACC! basic tenant gate
        // return Auth::check() && Auth::user()->accounts()->exists();

        // Or defer to a policy (example)
        // return $this->user()?->can( 'update', $this->routeModel() ) ?? false;

        return true;
    }

    public function rules(): array
    {
        $isCreate = $this->isMethod( 'POST' );
        // $id = $this->routeId();
        // ACC!
        // $accountId = Auth::user()->accounts()->value( 'accounts.id' );

        return [
            # Strings
            'name' => [
                $isCreate ? 'required' : 'sometimes',
                'string',
                'min:2',
                'max:120',

                // Unique per account, ignoring deleted status and current row
                // Rule::unique( 'tandaras', 'name' )
                //     ->where( fn( $q ) => $q
                //         // ->where( 'account_id', $accountId ) // ACC!
                //         ->where( 'status', '!=', 'deleted' )
                //     )
                //     ->ignore( $id ),
            ],

            'desc' => [
                $isCreate ? 'nullable' : 'sometimes',
                'string',
                'max:5000',
            ],

            # Enums
            'status' => [
                $isCreate ? 'required' : 'sometimes',
                Rule::enum( ExampleStatusEnum::class ),
            ],

            # Booleans and numbers
            // 'is_active' => [ $isCreate ? 'required' : 'sometimes', 'boolean' ],
            // 'count'     => [ $isCreate ? 'required' : 'sometimes', 'integer', 'between:0,100000' ],
            // 'price'     => [ $isCreate ? 'required' : 'sometimes', 'numeric', 'min:0' ],
            // 'ratio'     => [ 'nullable', 'decimal:0,4' ],

            # Dates
            // 'served_at' => [ 'nullable', 'date' ],
            // 'starts_at' => [ 'required', 'date', 'after_or_equal:today' ],
            // 'ends_at'   => [ 'required', 'date', 'after:starts_at' ],
            // Exact ISO format if you need it:
            'served_at' => [ 'nullable', 'date_format:Y-m-d\TH:i:sP' ],

            # Emails and URLs
            // 'email' => [ 'required', 'string', 'lowercase', 'email:rfc,dns' ],
            // 'url'   => [ 'nullable', 'url' ],

            # Arrays and nested
            // 'tags'        => [ 'array', 'max:10' ],
            // 'tags.*'      => [ 'string', 'distinct:strict', 'min:2', 'max:30' ],
            // 'meta'        => [ 'nullable', 'array' ],
            // 'meta.locale' => [ 'nullable', 'string', Rule::in( [ 'en_AU', 'en_US' ] ) ],
            // 'items'       => [ 'array', 'min:1' ],
            // 'items.*.id'  => [ 'required', 'integer' ],
            // 'items.*.qty' => [ 'required', 'integer', 'min:1' ],

            # Files
            // 'avatar'   => [ 'nullable', 'image', 'max:1024', 'dimensions:min_width=200,min_height=200' ],
            // 'document' => [ 'nullable', 'file', 'mimetypes:application/pdf', 'max:5120' ],
            // or new File rule style:
            // 'document' => [ File::types( [ 'pdf' ] )->max( 5 * 1024 ) ],

            # Existence with visibility rules
            // 'account_id' => [
            //     'required',
            //     'integer',
            //     Rule::exists( 'accounts', 'id' )
            //         ->where( fn( $q ) => $q->where( 'status', '!=', 'deleted' ) ),
            // ], // ACC!

            # Conditional requirements
            // 'reason' => [
            //     'nullable',
            //     'string',
            //     'max:200',
            //     'required_if:status,disabled',
            //     // 'prohibited_unless:status,disabled',
            // ],
        ];
    }

    public function messages(): array
    {
        return [
            // 'name.required' => 'Please enter a name.',
            // 'email.email'   => 'Enter a valid email address.',
        ];
    }

    public function attributes(): array
    {
        return [
            // 'desc'      => 'description',
            // 'served_at' => 'served at time',
        ];
    }

    protected function prepareForValidation(): void
    {
        $data = $this->all();

        // Trim and collapse whitespace
        if ( isset( $data['name'] ) ) {
            $data['name'] = preg_replace( '/\s+/u', ' ', trim( (string) $data['name'] ) );
        }

        // Normalise booleans commonly sent as strings
        // foreach ( [ 'is_active' ] as $key ) {
        //     if ( array_key_exists( $key, $data ) ) {
        //         $data[$key] = filter_var( $data[$key], FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE );
        //     }
        // }

        // Accept JSON strings for meta/extra and decode
        foreach ( [ 'extra', 'meta' ] as $key ) {
            if ( isset( $data[ $key ] ) && is_string( $data[ $key ] ) ) {
                $decoded = json_decode( $data[ $key ], true );
                if ( json_last_error() === JSON_ERROR_NONE ) {
                    $data[ $key ] = $decoded;
                }
            }
        }

        $this->replace( $data );
    }

    protected function passedValidation(): void
    {
        // Derive or reshape after validation if needed
        // $this->merge( [ 'slug' => Str::slug( $this->validated( 'name' ) ) ] );
    }

    # Helpers
    // protected function routeId(): int|string|null
    // {
    //     // Try common keys
    //     foreach ( [ 'id', 'tandara', 'model' ] as $key ) {
    //         $val = $this->route( $key );
    //         if ( $val ) {
    //             return is_object( $val ) && method_exists( $val, 'getKey' ) ? $val->getKey() : $val;
    //         }
    //     }

    //     // Fallback: first scalar or model key among route parameters
    //     $params = $this->route()?->parameters() ?? [];
    //     foreach ( $params as $p ) {
    //         if ( is_object( $p ) && method_exists( $p, 'getKey' ) ) {
    //             return $p->getKey();
    //         }
    //         if ( is_scalar( $p ) ) {
    //             return (int) $p;
    //         }
    //     }
    //     return null;
    // }

    // Example if you prefer policy based authorisation tied to a route model
    // protected function routeModel(): mixed
    // {
    //     $param = $this->route( 'tandara' ); // swap per route name
    //     return is_object( $param ) ? $param : null;
    // }
}
